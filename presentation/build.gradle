apply plugin: 'com.android.application'

android {
  def globalConfiguration = rootProject.extensions.getByName("ext")

  compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
  buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

  defaultConfig {
    minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
    targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")

    applicationId globalConfiguration.getAt("androidApplicationId")
    versionCode globalConfiguration.getAt("androidVersionCode")
    versionName globalConfiguration.getAt("androidVersionName")
    testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
    testApplicationId globalConfiguration.getAt("testApplicationId")
  }

  dexOptions {
    // Skip pre-dexing when running on Circle CI or when disabled via -Dpre-dex=false
    preDexLibraries = globalConfiguration.getAt("isPreDexEnabled") && !globalConfiguration.getAt("isCiEnvironment")
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
  }

  lintOptions {
    quiet true
    abortOnError false
    ignoreWarnings true
    disable 'InvalidPackage' //Some libraries have issues with this.
    disable 'OldTargetApi' //Lint gives this warning but SDK 20 would be Android L Beta.
    disable 'IconDensities' //For testing purpose. This is safe to remove.
    disable 'IconMissingDensityFolder' //For testing purpose. This is safe to remove.
  }

  signingConfigs {
    debug {
      storeFile file('../buildsystem/debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }
  }

  buildTypes {
    debug {
      applicationIdSuffix '.DEBUG'
      signingConfig signingConfigs.debug
    }

    release {
      signingConfig signingConfigs.debug
    }
  }
}

dependencies {
  def presentationDependencies = rootProject.ext.presentationDependencies
  def presentationTestDependencies = rootProject.ext.presentationTestDependencies
  def developmentDependencies = rootProject.ext.developmentDependencies

  implementation project(':domain')
  implementation project(':data')
  implementation project(':utils')

  implementation 'com.github.ittianyu:BottomNavigationViewEx:1.2.4'
  implementation 'com.thoughtbot:expandablerecyclerview:1.3'

  implementation(presentationDependencies.appCompatV7) {
    exclude module: 'support-v4'
  }
  implementation presentationDependencies.designLibrary
  implementation presentationDependencies.constraintLayout
  implementation presentationDependencies.glide
  annotationProcessor presentationDependencies.glideCompiler
  implementation presentationDependencies.dagger
  annotationProcessor presentationDependencies.daggerCompiler
  implementation presentationDependencies.butterKnife
  annotationProcessor presentationDependencies.butterKnifeCompiler
  implementation presentationDependencies.recyclerView
  implementation presentationDependencies.rxJava
  implementation presentationDependencies.rxAndroid
  compileOnly presentationDependencies.javaxAnnotation

  androidTestImplementation presentationTestDependencies.mockito
  androidTestImplementation presentationTestDependencies.dexmaker
  androidTestImplementation presentationTestDependencies.dexmakerMockito
  androidTestImplementation presentationTestDependencies.espresso
  androidTestImplementation presentationTestDependencies.testingSupportLib

  //Development
  debugImplementation developmentDependencies.leakCanary
  releaseImplementation developmentDependencies.leakCanaryNoOp
  testImplementation developmentDependencies.leakCanaryNoOp
}
